@model IList<ProductDetailsModel.ProductAttributeModel>
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Catalog;
@using Nop.Core.Domain.Media;
@using Nop.Core.Infrastructure;
@using System.Text;
@if (Model.Count > 0)
{
    <div class="attributes">
        <table class="table table-xs">
                @foreach (var attribute in Model)
                {
                    <tr>
                        @{ 
                            string controlId = string.Format("product_attribute_{0}", attribute.Id);
                            string textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;
                        }
                        <td id="@string.Format("product_attribute_label_{0}", attribute.Id)" class="attributeLabeltr">
                            <label class="text-prompt">
                                @textPrompt
                            </label>
                            @if (attribute.IsRequired)
                    {
                                <span class="required">*</span>
                            }
                            @if (!string.IsNullOrEmpty(attribute.Description))
                    {
                                <label>
                                    @Html.Raw(attribute.Description)
                                </label>
                            }
                        </td>
                        <td id="@string.Format("product_attribute_input_{0}", attribute.Id)">
                            @switch (attribute.AttributeControlType)
                    {
                        case AttributeControlType.DropdownList:
                            {
                                        <select class="form-control attribueteSelect" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw(string.Format("onchange=\"showHideDropdownQuantity('{0}')\"", controlId)) : null)>
                                            @if (!attribute.IsRequired)
                                            {
                                                <option value="0">---</option>
                                            }
                                            @foreach (var attributeValue in attribute.Values)
                                            {
                                                var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                                    attributeValue.Name :
                                                    T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                                        attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                                                <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeName</option>
                                            }
                                        </select>
                                        foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                                        {
                                            <div class="qty-box row" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                                <label for="@(controlId)_@(attributeValue.Id)_qty" class="col-lg-3 col-md-3 col-sm-3 col-xs-12">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                <span class="col-lg-9 col-md-9 col-sm-9 col-xs-12">
                                                    <input type="text" class="form-control" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                </span>

                                            </div>
                                        }
                                        <script>
                                    $(document).ready(function() {
                                        showHideDropdownQuantity("@controlId");
                                    });
                                        </script>
                                    }
                                    break;
                                case AttributeControlType.RadioList:
                                    {
                                        <ul class="option-list list-group">
                                            @foreach (var attributeValue in attribute.Values)
                                            {
                                                var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                                    attributeValue.Name :
                                                    T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                                        attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                                                <li class="list-group-item">
                                                    <div class="radio">
                                                        <label>
                                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                                                   @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw(string.Format("onclick=\"showHideRadioQuantity('{0}')\"", controlId)) : null) />
                                                            @attributeName
                                                        </label>
                                                    </div>


                                                    @if (attributeValue.CustomerEntersQty)
                                    {
                                                        <div class="qty-box row" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                                            <label class="col-lg-3 col-md-3 col-sm-3 col-xs-12" for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                            <span class="col-lg-9 col-md-9 col-sm-9 col-xs-12">
                                                                <input type="text" class="form-control" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                            </span>
                                                        </div>
                                                    }
                                                </li>
                                            }
                                        </ul>
                                        <script>
                                    $(document).ready(function() {
                                        showHideRadioQuantity("@controlId");
                                    });
                                        </script>
                                    }
                                    break;
                                case AttributeControlType.Checkboxes:
                                case AttributeControlType.ReadonlyCheckboxes:
                                    {
                                        <ul class="option-list list-group">
                                            @foreach (var attributeValue in attribute.Values)
                                            {
                                                var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                                    attributeValue.Name :
                                                    T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                                        attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                                                <li class="list-group-item">
                                                    <div class="checkbox">
                                                        <label>
                                                            <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null)
                                                                   @(attributeValue.CustomerEntersQty ? Html.Raw(string.Format("onchange=\"showHideCheckboxQuantity('{0}_{1}')\"", controlId, attributeValue.Id)) : null) />
                                                            @attributeName
                                                        </label>
                                                    </div>

                                                    @if (attributeValue.CustomerEntersQty)
                                                    {
                                                        <div class="qty-box row" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">

                                                            <label class="col-lg-3 col-sm-3 col-md-3 col-xs-12" for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                            <span class="col-lg-9 col-md-9 col-sm-9 col-xs-12">
                                                                <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                            </span>
                                                            <script>
                                                        $(document).ready(function() {
                                                            showHideCheckboxQuantity('@(controlId)_@(attributeValue.Id)');
                                                        })
                                                            </script>
                                                        </div>
                                                    }
                                                </li>
                                            }
                                        </ul>
                                    }
                                    break;
                                case AttributeControlType.TextBox:
                                    {
                                        <input name="@(controlId)" type="text" class="textbox form-control" id="@(controlId)" value="@attribute.DefaultValue" />
                                    }
                                    break;
                                case AttributeControlType.MultilineTextbox:
                                    {
                                        <textarea cols="20" class="form-control" id="@(controlId)" name="@(controlId)">@attribute.DefaultValue</textarea>
                                    }
                                    break;
                                case AttributeControlType.Datepicker:
                                    {
                                        @Html.DatePickerDropDowns(controlId + "_day", controlId + "_month", controlId + "_year", DateTime.Now.Year, DateTime.Now.Year + 1, attribute.SelectedDay, attribute.SelectedMonth, attribute.SelectedYear, htmlAttributes: new { @class = "form-control" })
                                    }
                                    break;
                                case AttributeControlType.FileUpload:
                                    {
                                        var downloadService = EngineContext.Current.Resolve<Nop.Services.Media.IDownloadService>();
                                        Download download = null;
                                        if (!String.IsNullOrEmpty(attribute.DefaultValue))
                                        {
                                            download = downloadService.GetDownloadByGuid(new Guid(attribute.DefaultValue));
                                        }

                                        //register CSS and JS
                                        Html.AddCssFileParts("~/Scripts/fineuploader/fineuploader-4.2.2.min.css");
                                        Html.AddScriptParts("~/Scripts/fineuploader/jquery.fineuploader-4.2.2.min.js");

                                        //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                                        var allowedFileExtensions = string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                                        if (download != null)
                                        {
                                            <input class="form-control" id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid" />
                                        }
                                        else
                                        {
                                            <input class="form-control" id="@(controlId)" name="@(controlId)" type="hidden" />
                                        }

                                        @*fine uploader container*@
                                        <div id="@(controlId)uploader"></div>
                                        @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                                        <script type="text/template" id="@(controlId)-qq-template">
                                            <div class="qq-uploader-selector qq-uploader">
                                                <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                                    <span>@T("Common.FileUploader.DropFiles")</span>
                                                </div>
                                                <div class="qq-upload-button-selector qq-upload-button">
                                                    <div>@T("Common.FileUploader.Upload")</div>
                                                </div>
                                                <span class="qq-drop-processing-selector qq-drop-processing">
                                                    <span>@T("Common.FileUploader.Processing")</span>
                                                    <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                                </span>
                                                <ul class="qq-upload-list-selector qq-upload-list">
                                                    <li>
                                                        <div class="qq-progress-bar-container-selector">
                                                            <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                                        </div>
                                                        <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                                        <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                                        <span class="qq-upload-file-selector qq-upload-file"></span>
                                                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                                        <span class="qq-upload-size-selector qq-upload-size"></span>
                                                        <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                                        <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                                        <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                                        <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                                    </li>
                                                </ul>
                                            </div>
                                        </script>
                                        <script type="text/javascript">
                                    $(document).ready(function() {
                                        $("#@(controlId)uploader").fineUploader({
                                            request: {
                                                endpoint: '@(Url.RouteUrl("UploadFileProductAttribute", new { attributeId = attribute.Id }))'
                                            },
                                            template: "@(controlId)-qq-template",
                                            multiple: false,
                                            validation: {
                                                allowedExtensions: [@Html.Raw(allowedFileExtensions)]
                                            }
                                        }).on("complete", function(event, id, name, responseJSON, xhr) {
                                            $("#@(controlId)").val(responseJSON.downloadGuid);
                                            if (responseJSON.success) {
                                                $("#@(controlId + "downloadurl")").html("<a href='" + responseJSON.downloadUrl + "'>@T("Common.FileUploader.DownloadUploadedFile")</a>");
                                                $("#@(controlId + "remove")").show();
                                            }
                                            if (responseJSON.message) {
                                                alert(responseJSON.message);
                                            }
                                        });

                                        $("#@(controlId + "remove")").click(function(e) {
                                            $("#@(controlId + "downloadurl")").html("");
                                            $("#@(controlId)").val('');
                                            $(this).hide();
                                        });
                                    });
                                        </script>
                                        <div id="@(controlId + "downloadurl")">
                                            @if (download != null)
                                            {
                                                <a href="@(Url.Action("GetFileUpload", "Download", new {downloadId = download.DownloadGuid}))" class="download-uploaded-file">@T("Common.FileUploader.DownloadUploadedFile")</a>
                                            }
                                        </div>
                                        <div>
                                            @if (download != null)
                                            {
                                                <a id="@(controlId + "remove")" class="remove-download-button">@T("Common.FileUploader.RemoveDownload")</a>
                                            }
                                            else
                                            {
                                                <a id="@(controlId + "remove")" class="remove-download-buttonn" style="display: none;">@T("Common.FileUploader.RemoveDownload")</a>
                                            }
                                        </div>

                                    }
                                    break;
                                case AttributeControlType.ColorSquares:
                                    {
                                        <ul class="option-list attribute-squares color-squares list-group" id="color-squares-@(attribute.Id)">
                                            @foreach (var attributeValue in attribute.Values)
                                            {
                                                var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                                    attributeValue.Name :
                                                    T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                                                <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"list-group-item active\"") : @Html.Raw(" class=\"list-group-item\""))>
                                                    <div class="radio">
                                                        <label>
                                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                                                   @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw(string.Format("onclick=\"showHideRadioQuantity('{0}')\"", controlId)) : null) />
                                                            <span class="attribute-square-container" title="@attributeName">
                                                                <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                                            </span>
                                                        </label>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                        foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                                        {
                                            <div class="qty-box row" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                                <label class="col-lg-3 col-md-3 col-sm-3 col-xs-12" for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                <span class="col-lg-9 col-md-9 col-sm-9 col-xs-12">
                                                    <input class="form-control" type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                </span>
                                            </div>
                                        }
                                        <script type="text/javascript">
                                    $(document).ready(function() {
                                        $('.attributes #color-squares-@(attribute.Id)').delegate('input', 'click', function(event) {
                                            $('.attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId");
                                    });
                                        </script>
                                    }
                                    break;
                                case AttributeControlType.ImageSquares:
                                    {
                                        <ul class="option-list attribute-squares image-squares list-group" id="image-squares-@(attribute.Id)">
                                            @foreach (var attributeValue in attribute.Values)
                                            {
                                                var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                                    attributeValue.Name :
                                                    T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                                                <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"list-group-item active\"") : @Html.Raw(" class=\"list-group-item\""))>
                                                    <div class="radio">
                                                        <label>
                                                            <input data-toggle="popover" data-img="@attributeValue.ImageSquaresPictureModel.ImageUrl" id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                                                   @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw(string.Format("onclick=\"showHideRadioQuantity('{0}', true)\"", controlId)) : null) />
                                                            <img data-toggle="popover" data-img="@attributeValue.ImageSquaresPictureModel.FullSizeImageUrl" src="@attributeValue.ImageSquaresPictureModel.ImageUrl" class="img-icon-5050" data-toggle="popover" data-placement="top" data-content="<img src='@(attributeValue.ImageSquaresPictureModel.FullSizeImageUrl)' alt='@attributeName' />" />
                                                        </label>
                                                    </div>
                                                    <label for="@(controlId)_@(attributeValue.Id)">
                                                        <span class="attribute-square-container">
                                                            <span class="attribute-square" style="background: url('') 50% 50% no-repeat;">&nbsp;</span>
                                                        </span>

                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                        foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                                        {
                                            <div class="qty-box row" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                                <label class="col-lg-3 col-md-3 col-sm-3 col-xs-12" for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                <span class="col-lg-9 col-md-9 col--sm-9 col-xs-12">
                                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                </span>
                                            </div>
                                        }
                                        <script type="text/javascript">
                                    $(document).ready(function() {
                                        $('.attributes #image-squares-@(attribute.Id)').delegate('input', 'click', function(event) {
                                            $('.attributes #image-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId", true);
                                    });
                                        </script>
                                    }
                                    break;
                            }
                        </td>
                    </tr>
                }
        </table>
        <script>
            function showHideDropdownQuantity(id) {
                $('select[name=' + id + '] > option').each(function() {
                    $('#' + id + '_' + this.value + '_qty_box').hide();
                });
                $('#' + id + '_' + $('select[name=' + id + '] > option:selected').val() + '_qty_box').css('display', 'inline-block');
            };

            function showHideRadioQuantity(id) {
                $('input[name=' + id + ']:radio').each(function() {
                    $('#' + $(this).attr('id') + '_qty_box').hide();
                });
                $('#' + id + '_' + $('input[name=' + id + ']:radio:checked').val() + '_qty_box').css('display', 'inline-block');
            };

            function showHideCheckboxQuantity(id) {
                if ($('#' + id).is(':checked'))
                    $('#' + id + '_qty_box').css('display', 'inline-block');
                else
                    $('#' + id + '_qty_box').hide();
            };
        </script>
    </div>
}
@if (Model.Count > 0)
{
    //dynamic update support
    var attributesHaveConditions = Model.Any(x => x.HasCondition);
    var attributesHaveAssociatedPictures = Model.Any(x => x.ProductId > 0);
    var attributeChangeScriptsBuilder = new StringBuilder();
    var productId = Model.First().ProductId;
    var attributeChangeHandlerFuncName = string.Format("attribute_change_handler_{0}", productId);
    if (EngineContext.Current.Resolve<CatalogSettings>().AjaxProcessAttributeChange)
    {
        //generate change event script
        foreach (var attribute in Model)
        {
            string controlId = string.Format("product_attribute_{0}", attribute.Id);
            switch (attribute.AttributeControlType)
            {
                case AttributeControlType.DropdownList:
                    {
                        attributeChangeScriptsBuilder.AppendFormat("$('#{0}').change(function(){{{1}();}});\n", controlId, attributeChangeHandlerFuncName);
                    }
                    break;
                case AttributeControlType.RadioList:
                case AttributeControlType.ColorSquares:
                case AttributeControlType.ImageSquares:
                    {
                        foreach (var attributeValue in attribute.Values)
                        {
                            attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').click(function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                        }
                    }
                    break;
                case AttributeControlType.Checkboxes:
                case AttributeControlType.ReadonlyCheckboxes:
                    {
                        foreach (var attributeValue in attribute.Values)
                        {
                            attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').click(function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                        }
                    }
                    break;
                default:
                    break;
            }

            foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
            {
                attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}_qty').on('input propertychange paste', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
            }
        }

        //render scripts
        //almost the same implementation is used in the \Views\Product\_RentalInfo.cshtml file
        <script type="text/javascript">
            function @(attributeChangeHandlerFuncName)() {
                $.ajax({
                    cache: false,
                    url: '@Html.Raw(Url.Action("productdetails_attributechange", "shoppingcart", new {productId = productId, validateAttributeConditions = attributesHaveConditions, loadPicture = attributesHaveAssociatedPictures }))',
                    data: $('#product-details-form').serialize(),
                    type: 'post',
                    success: function(data) {
                        if (data.price) {
                            $('.price-value-@productId').text(data.price);
                        }
                        if (data.sku) {
                            $('#sku-@productId').text(data.sku).parent(".sku").show();
                        } else {
                            $('#sku-@productId').parent(".sku").hide();
                        }
                        if (data.mpn) {
                            $('#mpn-@productId').text(data.mpn).parent(".manufacturer-part-number").show();
                        } else {
                            $('#mpn-@productId').parent(".manufacturer-part-number").hide();
                        }
                        if (data.gtin) {
                            $('#gtin-@productId').text(data.gtin).parent(".gtin").show();
                        } else {
                            $('#gtin-@productId').parent(".gtin").hide();
                        }
                        if (data.stockAvailability) {
                            $('#stock-availability-value-@productId').text(data.stockAvailability);
                        }
                        if (data.enabledattributemappingids) {
                            for (var i = 0; i < data.enabledattributemappingids.length; i++) {
                                $('#product_attribute_label_' + data.enabledattributemappingids[i]).show();
                                $('#product_attribute_input_' + data.enabledattributemappingids[i]).show();
                            }
                        }
                        if (data.disabledattributemappingids) {
                            for (var i = 0; i < data.disabledattributemappingids.length; i++) {
                                $('#product_attribute_label_' + data.disabledattributemappingids[i]).hide();
                                $('#product_attribute_input_' + data.disabledattributemappingids[i]).hide();
                            }
                        }
                        if (data.pictureDefaultSizeUrl) {
                            $('#main-product-img-@productId').attr("src", data.pictureDefaultSizeUrl);
                        }
                        if (data.pictureFullSizeUrl) {
                            $('#main-product-img-lightbox-anchor-@productId').attr("href", data.pictureFullSizeUrl);
                        }
                        if (data.message) {
                            alert(data.message);
                        }
                        $.event.trigger({ type: "product_attributes_changed", changedData: data });
                    }
                });
            }
            $(document).ready(function() {
                @(attributeChangeHandlerFuncName)();
                @Html.Raw(attributeChangeScriptsBuilder.ToString())
            });
        </script>
    }
}